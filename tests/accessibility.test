# This file is a Tcl script to test out Tk's "tk accessibility" commands.
# It is organized in the standard fashion for Tcl tests.
#
# Copyright © 1994 The Regents of the University of California.
# Copyright © 1998-2000 Scriptics Corporation.
# Copyright © 2025 Kevin Walzer/WordTech Communications LLC. 

package require tcltest 2.2
namespace import ::tcltest::*
eval tcltest::configure $argv
tcltest::loadTestedCommands

package require tk

# Force-enable Aqua tests on macOS
if {[tk windowingsystem] eq "aqua"} {
    tcltest::testConstraint aqua 1
}

if {[tk windowingsystem] eq "win32"} {
    tcltest::testConstraint win32 1
}
if {[tk windowingsystem] eq "x11"} {
    tcltest::testConstraint x11 1
}


# macOS Test
test accessibility-macos-1.1 {Check button role via AppleScript/AX} -constraints {aqua} -setup {
    toplevel .t
    button .t.b -text "Hello"
    pack .t.b
    update
    after 500
} -body {
    set script {
        tell application "System Events"
            set frontApp to name of first application process whose frontmost is true
            tell application process frontApp
                set axrole to value of attribute "AXRole" of first button
                set axname to value of attribute "AXTitle" of first button
                return axrole & ":" & axname
            end tell
        end tell
    }
    set result [exec osascript -e $script]
    return $result
} -cleanup {
    destroy .t
} -result {AXButton:Hello}

# Windows Test
test accessibility-windows-1.1 {Check button via PowerShell UIA} -constraints {win32} -setup {
    toplevel .t
    button .t.b -text "Click me"
    pack .t.b
    wm title .t "Tk Accessibility Test"
    update
    after 1000
} -body {
    set psScript {
Add-Type -AssemblyName UIAutomationClient
$root = [System.Windows.Automation.AutomationElement]::RootElement
$cond = New-Object System.Windows.Automation.PropertyCondition `
    ([System.Windows.Automation.AutomationElement]::NameProperty, "Tk Accessibility Test")
$win = $root.FindFirst([System.Windows.Automation.TreeScope]::Children, $cond)
$button = $win.FindFirst([System.Windows.Automation.TreeScope]::Descendants, `
    (New-Object System.Windows.Automation.PropertyCondition `
    ([System.Windows.Automation.AutomationElement]::ControlTypeProperty, `
     [System.Windows.Automation.ControlType]::Button)))
$button.Current.Name + ":" + $button.Current.ControlType.ProgrammaticName
}
    set result [exec powershell -Command $psScript]
    return $result
} -cleanup {
    destroy .t
} -result {Click me:ControlType.Button}

# Linux Test
test accessibility-linux-1.1 {Check accessible entry via at-spi-dump} -constraints {x11} -setup {
    toplevel .t
    entry .t.e
    .t.e insert 0 "Username"
    pack .t.e
    wm title .t "TkAccessibilityApp"
    update
    after 1000
} -body {
    set output [exec at-spi-dump --name "Tk Application"]
    set lines [split $output "\n"]
    set entryInfo ""
    foreach line $lines {
        if {[string match "*entry*Username*" $line]} {
            set entryInfo $line
            break
        }
    }
    return $entryInfo
} -cleanup {
    destroy .t
} -result {*entry*Username*}

# Cleanup after all tests in the file have been registered and run.
tcltest::cleanupTests
